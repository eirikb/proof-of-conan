name: Proof of Conan

on:
  workflow_dispatch:
    inputs:
      os:
        required: true
        default: 'ubuntu-latest'
        description: 'OS. E.g., ubuntu-latest, windows-latest, macos-latest'
      container:
        required: false
        description: 'Container (only for Linux). E.g., conanio/gcc9-arm7hf'
      conancmd:
        required: true
        description: 'Conan install command'
      toolchain:
        required: false
        description: 'Toolchain package'
      toolchainos:
        required: false
        description: 'Toolchain os, because has to manually kick a file'


jobs:

  # An effort to whitelist some characters
  prep:
    runs-on: ubuntu-latest
    outputs:
      conancmd: ${{ steps.step1.outputs.test }}
    steps:
      - id: step1
        name: Whitelist command
        run: |
          # https://unix.stackexchange.com/a/498744
          case "${{ github.event.inputs.conancmd }}" in
            ("" | *[!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890./@\-\ =+\'_:]*)
              echo "NOT ALLOWED" && exit 1;;
            (*)
              echo "::set-output name=test::${{ github.event.inputs.conancmd }}";;
          esac

  build-container:
    needs: prep
    if: github.event.inputs.container != ''
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - run: docker run --rm -t "${{ github.event.inputs.container }}" conan install ${{ needs.prep.outputs.conancmd }}

  build-os:
    needs: prep
    if: github.event.inputs.container == ''
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - run: pip3 install conan
      - name: 'Windows toolchain: ${{ github.event.inputs.conancmd }}'
        if: ${{ github.event.inputs.toolchain != '' && github.event.inputs.toolchainos == 'windows' }}
        run: |
          conan install "${{ github.event.inputs.toolchain }}" -g virtualenv
          ls
          Write-Host "Activating..."
          . .\activate.ps1
          Write-Host "Activate done"
          conan profile new default --detect --force
          conan install ${{ needs.prep.outputs.conancmd }}
      - name: 'Linux/Macos toolchain: ${{ github.event.inputs.conancmd }}'
        if: ${{ github.event.inputs.toolchain != '' && ( github.event.inputs.toolchainos == 'macos' || github.event.inputs.toolchainos == 'linux' ) }}
        run: |
          conan install "${{ github.event.inputs.toolchain }}" -g virtualenv
          source activate.sh
          conan install ${{ needs.prep.outputs.conancmd }}
      - name: 'No toolchain: ${{ github.event.inputs.conancmd }}'
        if: ${{ github.event.inputs.toolchain == '' }}
        run: conan install ${{ needs.prep.outputs.conancmd }}
